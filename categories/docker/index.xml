<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>docker on Taichi Nakashima</title>
    <link>https://deeeet.com/categories/docker/</link>
    <description>Recent content in docker on Taichi Nakashima</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>Copyright © 2013-2020 Taichi Nakashima</copyright>
    <lastBuildDate>Mon, 01 Dec 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://deeeet.com/categories/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dockerコンテナ接続パターン (2014年冬)</title>
      <link>https://deeeet.com/writing/2014/12/01/docker-link-pattern/</link>
      <pubDate>Mon, 01 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://deeeet.com/writing/2014/12/01/docker-link-pattern/</guid>
      <description>本記事はDocker Advent Calendar 2014の1日目の記事です．
Dockerによるコンテナ化はリソース隔離として素晴らしい技術である．しかし，通常は1つのコンテナに全ての機能を詰め込むようなことはしない．マイクロサービス的にコンテナごとに役割を分け，それらを接続し，協調させ，全体として1つのサービスを作り上げるのが通常の使い方になっている．
コンテナ同士の接続と言っても，シングルホスト内ではどうするのか，マルチホストになったときにどうするのかなど様々なパターンが考えられる．Dockerが注目された2014年だけでも，とても多くの手法や考え方が登場している．
僕の観測範囲で全てを追いきれているかは分からないが，現状見られるDockerコンテナの接続パターンを実例と共にまとめておく．
なお今回利用するコードは全て以下のレポジトリをcloneして自分で試せるようになっている．
 tcnksm/docker-link-pattern  概要 本記事では以下について説明する．
 link機能（シングルホスト） fig（シングルホスト） Ambassadorパターン（マルチホスト） 動的Ambassadorパターン（マルチホスト） weaveによる独自ネットワークの構築（マルチホスト） Kubernetes（マルチホスト）  事前知識 事前知識として，Dockerがそのネットワークをどのように制御しているかを知っていると良い．それに関しては以下で書いた．
 Dockerのネットワークの基礎 | SOTA  利用する状況 以下ではすべてのパターンを，同じ状況で説明する．redisコンテナ（crosbymichael/redis）を立て．それにresdis-cliコンテナ（relateiq/redis-cli）で接続するという状況を考える．
link機能（シングルホスト） まず，基礎．DockerはLinksというコンテナ同士の連携を簡単に行う仕組みを標準でもっている．これは，--link &amp;lt;連携したいコンテナ名&amp;gt;:&amp;lt;エイリアス名&amp;gt;オプションで新しいコンテナを起動すると，そのコンテナ内で連携したいコンテナのポート番号やIPを環境変数として利用できるという機能である．
今回の例でいうと，まず，redisという名前でredisコンテナを立てておく．
$ docker run -d --name redis crosbymichael/redis これに接続するには，以下のようにする．
$ docker run -it --rm --link redis:redis relateiq/redis-cli redis 172.17.0.42:6379&amp;gt; ping PONG relateiq/redis-cliコンテナの起動スクリプトは以下のようになっている．
# !/bin/bash if [ $# -eq 0 ]; then /redis/src/redis-cli -h $REDIS_PORT_6379_TCP_ADDR -p $REDIS_PORT_6379_TCP_PORT else /redis/src/redis-cli &amp;#34;$@&amp;#34; fi 引数なしで起動すると，relateiq/redis-cliは環境変数， $REDIS_PORT_6379_TCP_ADDRに接続しようとする．--link redis:redisでこれを起動することで，この環境変数が設定され，接続できる．</description>
    </item>
    
    <item>
      <title>DockerによるマルチホストのPaaS flynnの概要とそのアーキテクチャー</title>
      <link>https://deeeet.com/writing/2014/07/07/flynn/</link>
      <pubDate>Mon, 07 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://deeeet.com/writing/2014/07/07/flynn/</guid>
      <description>&amp;ldquo;flynnの時代&amp;rdquo;
&amp;ldquo;Docker meetup tokyo #3&amp;rdquo;で発表してきた．内容は，Dockerの応用の１つであるOSSでPaaSをつくるflynnというプロジェクトの概要とそのアーキテクチャーの紹介．このflynnというプロジェクトの中には，Dockerの面白い使い方がたくさん詰まってるため，今後Dockerを使う人が，その応用の際の参考になればという思いで紹介させてもらった．
今回の発表のために資料を集めまくり，理解できない部分は出来る限りコードも読んだ．発表スライドの補完にもなると思うので，そのメモ書き（一応体裁は整えた）を公開しておく．
デモ 以下は，簡単なデモ．
やっていることは以下．
 nodeのアプリケーションをデプロイ ルーティングの追加 スケール  コマンドを含めた詳しい解説は以下で解説する．
前提知識 (Herokuの動作) まず，前提知識としてPaaS (ここではHeroku) がどのように動作しているのかをそのワークフローとともにまとめておく．
$ heroku create  Stackと呼ばれるベースとなるOSを準備する  e.g., Cedar stack    $ git push heroku master  アプリケーションがデプロイされる slug compilerでアプリケーションをビルドしてslugを作成する  slug compiler  各言語のBuildpackの集合 依存関係のインストール  e.g., RubyならGemfileをもとにrubygemsをインストール     slug  ソースと依存ライブラリ，言語のランタイムを含んだ圧縮されたファイルシステム(SquashFS)     アプリケーションの実行環境（Dyno）を準備する  Dyno  LXCをベースにしたContainer環境     Dynoにslugをロードする Procfileをもとにアプリケーションを起動する  Procfile  プロセスの起動コマンドを記述  e.</description>
    </item>
    
    <item>
      <title>Dockerのネットワークの基礎</title>
      <link>https://deeeet.com/writing/2014/05/11/docker-network/</link>
      <pubDate>Sun, 11 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://deeeet.com/writing/2014/05/11/docker-network/</guid>
      <description>今までいろいろ触ってきて，Dockerネットワーク周りに関しては何となくは理解していたが，人に説明できるほど理解してなかったのでまとめておく．基本は，Advanced networking - Docker Documentationがベースになっている．
仮想ブリッジの仕組み Dockerのネットワークは，仮想ブリッジdocker0を通じて管理され，他のネットワークとは隔離された環境で動作する．
Dockerデーモンを起動すると，
 仮想ブリッジdocker0の作成 ホストの既存ルートからの空きのIPアドレス空間を検索 空きから特定の範囲のIPアドレス空間を取得 取得したIPアドレス空間をdocker0に割り当て  が行われる．
コンテナを起動すると，コンテナには以下が割り当てられる．
 docker0に紐づいたveth（Virtual Ethernet）インターフェース docker0に割り当てられたIPアドレス空間から専用のIPアドレス  そしてdocker0はコンテナのデフォルトのgatewayとして利用されるようになる．コンテナに付与されるvethは仮想NICで，コンテナ側からはeth0として見える．2つはチューブのように接続され，あらゆるやりとりはここを経由して行われるようになる．
実際にコンテナを起動して確認する．まず，インターフェースから．
$ brctl show bridge name bridge id STP enabled interfaces docker0 8000.000000000000 no $ docker run -d ubuntu /bin/sh -c &amp;#34;while true; do echo hello world; sleep 1; done&amp;#34; b9ffb0800ca5 $ docker run -d ubuntu /bin/sh -c &amp;#34;while true; do echo hello world; sleep 1; done&amp;#34; 4c0d9b786e8f $ brctl show bridge name bridge id STP enabled interfaces docker0 8000.</description>
    </item>
    
    <item>
      <title>Dockerとは何か？どこで使うべきか？</title>
      <link>https://deeeet.com/writing/2014/05/01/what-is-docker/</link>
      <pubDate>Thu, 01 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://deeeet.com/writing/2014/05/01/what-is-docker/</guid>
      <description>この記事はDockerに関する実験的な記事や，Buildpackを使ってHeroku AppをDocker Containerとして使えるようにする&amp;ldquo;building&amp;rdquo;の開発などで知られるCenturyLink Labsの &amp;ldquo;What is Docker and When To Use It&amp;rdquo;の翻訳です． Dockerとは何か？Dockerをどこで使うべきか？についてよく見かける記事とは違った視点から説明されています． 翻訳は許可をとった上で行っています．
Dockerとは何でないか Dockerとは何かを説明する前に，Dockerは何でないかについて述べる．Dockerの否定形は何か？Dockerの制限は何か？Dockerが得意でないことは何か？
 DockerはLXCのようなLinux Containerではない DockerはLXCだけのラッパーではない（理論的には仮想マシンも管理できる） DockerはChefやPuppet，SaltStackのようなConfiguration toolの代替ではない DockerはPaaSではない Dockerは異なるホスト間での連携が得意ではない DockerはLXC同士を隔離するのが得意ではない  Dockerとは何か では，Dockerは何ができるのか？メリットはなにか？
 Dockerはインフラを管理することができる Dockerはイメージのビルドや，Docker Indexを通じたイメージの共有ができる DockerはChefやPuppetといったConfiguration toolによりビルドされたサーバのテンプレートにとって，イメージ配布の良いモデルである DockerはCopy-on-wirteのファイルシステムであるbtrfsを使っており，Gitのようにファイルシステムの差分を管理することができる Dockerはイメージのリモートレポジトリをもっているため，簡単にそれらを様々なOS上で動かすことができる  Dockerの代替は何か AmazonのAWS MarketplaceはDocker Indexに近い．ただし，AMIはAWS上でしか動かすことができないのに対して，Dockerイメージは，Dockerが動いているLinuxサーバであればどこでも動かすことができる．
Cloud FoundryのWardenはLXCの管理ツールであり，Dockerに近い．ただし，Docker Indexのような他人とイメージを共有する仕組みを持っていない．
Dockerをいつ使うべきか DockerはGitやJavaのような基本的な開発ツールになりうるものであり，日々の開発やオペレーションに導入し始めるべきである．
例えば，
 インフラのバージョン管理システムとして使う チームにアプケーション用のインフラを配布したいときに使う 稼働中のサーバーと同様の環境をラップトップ上に再現して，コードを実行したいときに使う（例えばbuildingを使う） 複数の開発フェーズ（dev，stg，prod，QA）が必要なときに使う ChefのCookbookやPuppetのManifestと使う  DockerとJavaはどこが似ているのか Javaには&amp;quot;Write Once. Run Anywhere（一度書けばどこでも実行できる）&amp;ldquo;という文言がある．
Dockerはそれに似ている．Dockerは，一度イメージをビルドすると，Dockerが動いているLinuxサーバであれば全く同じようにそれを動かすことができる（&amp;ldquo;Build Once．Run Anywhere&amp;rdquo;）．
Javaの場合，例えば以下のようなJavaコードがあるとする．
// HelloWorld.java class HelloWorldApp { public static void main(String[] args) { System.</description>
    </item>
    
  </channel>
</rss>
