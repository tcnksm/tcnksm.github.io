<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Terraform on SOTA</title>
    <link>https://deeeet.com/categories/terraform/</link>
    <description>Recent content in Terraform on SOTA</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>Copyright (C) 2013-2019 Taichi Nakashima All Right Reserved.</copyright>
    <lastBuildDate>Mon, 04 Aug 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://deeeet.com/categories/terraform/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>TerraformでHerokuアプリのセットアップ</title>
      <link>https://deeeet.com/writing/2014/08/04/terraform-heroku/</link>
      <pubDate>Mon, 04 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://deeeet.com/writing/2014/08/04/terraform-heroku/</guid>
      <description>ちょうど新しくHerokuでアプリケーションを作り始めたので，Terraformを使ってセットアップをしてみた．
Terraformとは TerraformはHashicorpの新作．インフラの構成をコード（テンプレートファイル）に落とし込んで，構築/変更することができる．インフラの構成は，複数のプロバイダやツール，例えば，AWSやConsul，DigitalOcean，Herokuなどにまたがって記述することができる．
Terraformが良いのは，各設定値を変数としてサービス間で共有できるところ．例えば，Herokuでアプリケーションを立ち上げた際に自動で割り振られるホスト名を，DNSimpleの設定項目に渡してCNAMEを設定するといったことが1つのファイルに書けてしまう（Cross Provider - Terraform）
他に良い点は，
 依存関係をグラフで管理しており，依存がない部分を並列で実行するため速い 実行する前にDry-run的に実行計画を出力できる ワークフロー（コマンド）がとてもシンプルである  簡単な例 tcnksm/re-dist-ghr・Github
実際に，Terraformを使ってHerokuに新規アプリケーションをセットアップし，作成中のGo言語のWebアプリをデプロイしてみた．
まず，設定ファイルであるheroku.tfは以下．
variable &amp;quot;heroku_email&amp;quot; {} variable &amp;quot;heroku_api_key&amp;quot; {} provider &amp;quot;heroku&amp;quot; { email = &amp;quot;${var.heroku_email}&amp;quot; api_key = &amp;quot;${var.heroku_api_key}&amp;quot; } resource &amp;quot;heroku_app&amp;quot; &amp;quot;default&amp;quot; { name = &amp;quot;ghr&amp;quot; stack = &amp;quot;cedar&amp;quot; config_vars { BUILDPACK_URL=&amp;quot;https://github.com/kr/heroku-buildpack-go.git&amp;quot; } }  やっているのは以下．
 providerでherokuを指定し，APIを利用するための設定を記述する resourceでheroku_appを指定しdefaultアプリケーションを作成し，アプリケーションの名前，利用するStack，環境変数（今回は利用するbuildpack）を記述する  作成前に以下で実行計画（どんな変数が設定されるかなど）を確認することができる．
$ terraform plan \ -var heroku_email=$HEROKU_EMAIL \ -var heroku_api_key=$HEROKU_API_KEY  例えば，今回だと以下のような出力が得られる．
+ heroku_app.default config_vars: &amp;quot;&amp;quot; =&amp;gt; &amp;quot;&amp;lt;computed&amp;gt;&amp;quot; config_vars.</description>
    </item>
    
  </channel>
</rss>