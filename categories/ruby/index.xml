<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ruby on SOTA</title>
    <link>http://deeeet.com/categories/ruby/</link>
    <description>Recent content in Ruby on SOTA</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>Copyright (C) 2013-2015 Taichi Nakashima All Right Reserved.</copyright>
    <lastBuildDate>Mon, 17 Mar 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://deeeet.com/categories/ruby/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>RubyのコマンドラインツールのMan Pageをつくる</title>
      <link>http://deeeet.com/writing/2014/03/17/gem-man/</link>
      <pubDate>Mon, 17 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://deeeet.com/writing/2014/03/17/gem-man/</guid>
      <description>コマンドラインツールでは，--helpオプションで簡単に使い方やオプションの説明を出力する．単純に使ってもらう分にはこれで足りる．ただ，さらにそのコマンドラインツールを使ってもらいたい場合には，詳細なドキュメントや使い方の例，簡単なチュートリアルをコマンドライン上で提供できるのがよい．単純にOptparseなどでこれをやろうとすると，スペースが足りないし，ちょっとヘルプを見たいだけのユーザには邪魔になる．
伝統的なUNIXコマンドは，manコマンドを通じてそのような詳細な情報を提供している．例えば，man lsと打てば，lsコマンドの詳細が見れる．RubyでつくったコマンドラインツールでもMan Pageを通じて，同様の情報を提供できるとよい．
しかし，Rubygems.orgを通してコマンドラインツールを配信する場合，標準のmanコマンドを通じてMan pageを提供するのは難しい．GithubのChris Wanstrath氏によるgem-manを使えば，gem manコマンドを通じて標準のmanと同様のMan Pageを簡単に提供できる．
さらに，Man Pageは，nroffという専用の言語で書かれており，わざわざ習得するのはめんどい．これも，rtomayko/ronnを使えば，MarkdownでMan pageを書いて，nroff形式に変換することができる．
TL;DR  gem manでrubyでつくったコマンドラインツールのMan Pageを提供する ronnでMarkdown形式をMan Pageのnroff形式を吐き出す  以下のようなものをつくる．
$ gem man your_app NAME your_app - Sample of gem-man and ronn SYNOPSIS your_app [options] DESCRIPTION your_app is a simple command-line tool for ... OPTIONS -h, --help Show help page. etc...  Install Gemとしてgem-manとronnをインストールする．
$ gem install gem-man ronn  Rubygemsとして配布する場合は，gemspecに以下を追記する．
# your_app.gemspec spec.add_dependency &amp;quot;gem-man&amp;quot; spec.add_development_dependency &amp;quot;ronn&amp;quot;  Man Pageのソースは，プロジェクトのルートのmanディレクトリに配置し，ファイル名はyour_app.</description>
    </item>
    
    <item>
      <title>Rakeのtask名にaliasを設定する</title>
      <link>http://deeeet.com/writing/2014/03/05/rake-alias/</link>
      <pubDate>Wed, 05 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://deeeet.com/writing/2014/03/05/rake-alias/</guid>
      <description>The alias of task name in rake
シンプルなやり方．
# Rakefile namespace :db do task :table do puts &amp;quot;table&amp;quot; end end task :t =&amp;gt; [&amp;quot;db:table&amp;quot;]  $ rake t # -&amp;gt; &amp;quot;table&amp;quot;  複数のタスクを一気に登録したい場合は，以下のようなメソッドを準備する．
# Rakefile def alias_tasks tasks tasks.each do |new, old| task new, [*Rake.application[old].arg_names] =&amp;gt; [old] end end namespace :db do task :table do puts &amp;quot;table&amp;quot; end task :schema do puts &amp;quot;schema&amp;quot; end end alias_tasks [ [:dt, &amp;quot;db:table&amp;quot;], [:ds, &amp;quot;db:schema&amp;quot;] ]  $ rake ds # -&amp;gt; schema  </description>
    </item>
    
    <item>
      <title>Rakefileに加えるべき7行</title>
      <link>http://deeeet.com/writing/2014/02/15/7lines-rakefile/</link>
      <pubDate>Sat, 15 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://deeeet.com/writing/2014/02/15/7lines-rakefile/</guid>
      <description>7 Lines Every Gem&amp;rsquo;s Rakefile Should Have
必要なgemをrequireしてすぐに使えるようにしましょうと．自分はpryで．
task :console do require &#39;pry&#39; requrey &#39;my_gem&#39; ARGV.clear Pry.start end  OSSだとpry使ってないひともいる可能性があるからirbでやったほうがいいかも．</description>
    </item>
    
    <item>
      <title>Pushover使ってみた</title>
      <link>http://deeeet.com/writing/2014/02/09/pushover/</link>
      <pubDate>Sun, 09 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://deeeet.com/writing/2014/02/09/pushover/</guid>
      <description>Pushover
PushoverはiOS/Androidの通知アプリ．提供されるシンプルなAPIを介して，アプリに通知を送れる．HTTP POSTさえできればよいので，Shell Scriptからでもrubyやperlからでも簡単に通知が送れる．
Rubyを使って遊んでみた．
require &#39;net/https&#39; url = URI.parse(&amp;quot;https://api.pushover.net/1/messages.json&amp;quot;) req = Net::HTTP::Post.new(url.path) req.set_form_data({ token: &amp;quot;****&amp;quot;, user: &amp;quot;****&amp;quot;, message: &amp;quot;Check this link, http://deeeet.com/&amp;quot;, title: &amp;quot;お知らせ&amp;quot;, device: &amp;quot;tcnksm_iphone&amp;quot;, url: &amp;quot;tel:117&amp;quot;, url_title: &amp;quot;Call now&amp;quot;, sound: &amp;quot;alien&amp;quot; }) res = Net::HTTP.new(url.host, url.port) res.use_ssl = true res.verify_mode = OpenSSL::SSL::VERIFY_PEER res.start {|http| http.request(req)}  userはsign upするともらえるUser Key．tokenはアプリを登録するともらえるAPI Token. messageは通知の本文． この3つが必須でこれだけでも通知は可能．
titleは通知のタイトル．指定しない場合は登録したアプリ名が使われる．deviceは通知したいデバイスを指定する．指定しない場合は登録されている全てのデバイスに通知される．
通知は以下のような感じ．
通知をタップすると，詳細が表示される．
通知本文内のURLは自動で判別されるため，ブラウザで開くことができる．urlとurl_titleパラメータを与えれば，追加でURLを送ることもできる．これで長いURLも送ることができるし，アプリのURLスキームも使えるので，例えば上のようにtel:117とすれば，タップでそのまま電話アプリを開いて117に電話するなんてこともできる（117はありえんが）．またsoundパラメータで通知音を変更することもできる．使える音はここにある．
priorityパラメータで通知のレベルも変更することができる．レベルは，Low(-1)，Normal(0)，High(1)，Emergency(2)の4つがある．
 Low: 通知は送られるが，通知音は鳴らない Normal: デフォルト．自分で設定するQuiet Hoursの間は通知音は鳴らない High: Quiet Hoursであっても通知音が鳴る Emergency: 通知内の確認ボタンをタップするまで通知音が鳴り続ける  例えば通知のレベルをHighにすると，通知は以下のように赤色になる．</description>
    </item>
    
    <item>
      <title>How to test ActionMailer</title>
      <link>http://deeeet.com/writing/2013/11/07/rspec-actionmailer/</link>
      <pubDate>Thu, 07 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://deeeet.com/writing/2013/11/07/rspec-actionmailer/</guid>
      <description>Railsに付属のactionmailer．Railsプロジェクトではなく，単独でも使うことができる．erbテンプレートが使えたり，htmlメールが送れるため，簡単なバッチをつくるときによく利用する．最小限の利用サンプルはこちら．
テストできるのは，メール送信数と送信先，送信元，件名，本文．まず，spec_helperの設定．
ActionMailer::Base.delivery_method = :test ActionMailer::Base.perform_deliveries = true  送信数．意図した数のメールが送られているか．
it &amp;quot;sends an mail&amp;quot; do expect(ActionMailer::Base.deliveries.count).to eq(1) end  送信先．意図したアドレスに配信されたか．
it &amp;quot;renders the receiver mail&amp;quot; do expect(ActionMailer::Base.deliveries.first.to).to eq([&amp;quot;test@mail.net&amp;quot;]) end  送信元．意図したアドレスから配信されているか．
it &amp;quot;renders the sender mail&amp;quot; do expect(ActionMailer::Base.deliveries.first.from).to eq([&amp;quot;sender@mail.net&amp;quot;]) end  件名．意図した件名で配信されているか．
it &amp;quot;set the success subject&amp;quot; do expect(ActionMailer::Base.deliveries.first.subject).to match(/[Success]/) end  本文．意図した本文で配信されているか．
it &amp;quot;sends the hello body&amp;quot; do expect(ActionMailer::Base.deliveries.first.body).to match(/Hello, #{user}./) end  今回のテストはすべてここにまとめてある．</description>
    </item>
    
  </channel>
</rss>