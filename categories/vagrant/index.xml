<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vagrant on SOTA</title>
    <link>http://deeeet.com/categories/vagrant/</link>
    <description>Recent content in Vagrant on SOTA</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>Copyright (C) 2013-2015 Taichi Nakashima All Right Reserved.</copyright>
    <lastBuildDate>Tue, 11 Mar 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://deeeet.com/categories/vagrant/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Vagrant shareとngrokを使ってみた</title>
      <link>http://deeeet.com/writing/2014/03/11/vagrant-share/</link>
      <pubDate>Tue, 11 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://deeeet.com/writing/2014/03/11/vagrant-share/</guid>
      <description>Vagrant 1.5 and Vagrant Cloud
Vagrant shareを使ってみた．今まではprivate_networkによるローカルマシンから仮想マシンへのアクセスや，public_networkによるLAN内のマシンから仮想マシンへのアクセスが可能だった．今回のアップデートで，外部ネットワークのマシンから，ローカルに立てた仮想マシンへのアクセスが可能になった．
主なアクセスは以下の2つ．
 仮想マシン内に立てたHTTPサーバーへのアクセス SSHによる仮想マシンへのログイン  試してみた．
準備 Vagrant Cloudでアカウントを作成し，ログインする．
$ vagrant login  また，例として以下のようなVagrantfileを準備し，仮想マシンを起動しておく．
Vagrant.configure(&amp;quot;2&amp;quot;) do |config| config.vm.box = &amp;quot;precise64&amp;quot; config.vm.box_url = &amp;quot;http://files.vagrantup.com/precise64.box&amp;quot; config.vm.network :forwarded_port, guest: 80, host: 8080 config.vm.provision :shell, :inline =&amp;gt; &amp;lt;&amp;lt;-PREPARE apt-get -y update apt-get install -y apache2 PREPARE end  $ vagarnt up  （やっているのは，8080-&amp;gt;80のport forwardとapacheのインストールのみ）
HTTP Access まず，PulicなHTTP URLを介して仮想マシン内のHTTPサーバにアクセスする方法．この場合は，共有相手のマシンにVagrantがインストールされている必要はない．
以下を実行する．
$ vagrant share ... ==&amp;gt; default: Your Vagrant Share is running!</description>
    </item>
    
    <item>
      <title>OSXのVagrant box</title>
      <link>http://deeeet.com/writing/2014/03/10/osx-vagrant-box/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://deeeet.com/writing/2014/03/10/osx-vagrant-box/</guid>
      <description>OS X on OS X Virtualize OS X Mavericks with VirtualBox  VirtualBoxで動かせるならVagrantでも使えるなと思って探してみたらやってるひといた．
 Creating an OS X Vagrant base box for VMware Fusion Troubles creating OS X 10.9 box with VirtualBox  それならPackerでもできるなと思って探してみたらやってるひといた．
 Creating an OS X Base Box for Vagrant With Packer  面白いなと思ったけど，やる気は全くない．</description>
    </item>
    
    <item>
      <title>VagrantでOracle DB環境をつくる</title>
      <link>http://deeeet.com/writing/2014/02/24/vagrant-oracle-db/</link>
      <pubDate>Mon, 24 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://deeeet.com/writing/2014/02/24/vagrant-oracle-db/</guid>
      <description>hilverd/vagrant-ubuntu-oracle-xe
を使う． VirtualBox Guest Additionsを使うため，事前にvagrant-vbguestをインストールしておく．あとは，hilverd/vagrant-ubuntu-oracle-xeをcloneしてvagrant upするだけ．</description>
    </item>
    
    <item>
      <title>他人に共有したくない設定をVagrantfileに書くためのpluginつくった</title>
      <link>http://deeeet.com/writing/2014/02/24/vagrant-secret/</link>
      <pubDate>Mon, 24 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://deeeet.com/writing/2014/02/24/vagrant-secret/</guid>
      <description> （追記）dotenvというもっと便利なツールがありました．僕のは，pluginを作る際の参考にしてください．dotenvとvagrantの連携は，glidenoteさんの&amp;ldquo;dotenvを利用して環境ごとでVagrantfileの設定値を変更してみる&amp;rdquo;を参考にしてください．
vagrant-secret
例えば，VagrantでDigital Oceanを使う場合，以下のようにclient_idやapi_keyのような他人には共有したくない設定をVagrantfileに記述する．
Vagrant.configure(&#39;2&#39;) do |config| config.vm.provider :digital_ocean do |provider, override| provider.client_id = &#39;****&#39; provider.api_key = &#39;****&#39; end end  ローカルで自分だけが使う場合は問題ないが，Githubに上げて他人に共有した場合は面倒になる．vagrant-secretを使えば，専用のyamlファイルに設定を分けて記述することができる．
インストール Vagrantのpluginとしてインストールする．
$ vagrant plugin install vagrant-secret  使い方 まず，以下のコマンドで設定ファイルを書き出す．
$ vagrant secret-init  すると，.vagrant/secret.yamlが生成されるので，そこに公開したくない設定を記述する．例えば，以下のようにDigital Oceanで必要なclient_idとapi_keyを記述する．
client_id: &amp;quot;*******&amp;quot; api_key: &amp;quot;********&amp;quot;  後は，これらをVagrantfileで使うだけ．yamlのkeyがSecretという専用のクラスのクラス変数に割り当てられ，それを通してvalueを取り出すことができる．
Vagrant.configure(&#39;2&#39;) do |config| config.vm.provider :digital_ocean do |provider, override| provider.client_id = Secret.client_id provider.api_key = Secret.api_key end end  .vagrant/以下は普通はgitignoreするので，secret.yamlをわざわざgitignoreする必要はない．
バグなどはGithubのissueか@deeeetまでお願いします．
参考
 VagrantとSSDなVPS(Digital Ocean)で1時間1円の使い捨て高速サーバ環境を構築する プロビジョニングの終了をiOS/Androidに通知するVagrantのpluginつくった  </description>
    </item>
    
    <item>
      <title>プロビジョニングの終了をiOS/Androidに通知するVagrantのpluginつくった</title>
      <link>http://deeeet.com/writing/2014/02/19/vagrant-pushover/</link>
      <pubDate>Wed, 19 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://deeeet.com/writing/2014/02/19/vagrant-pushover/</guid>
      <description>tcnksm/vagrant-pushover
Vagrantのプロビジョニングはものすごく時間がかかる．その時間を使って美味しい珈琲を淹れたい．でも，席を外したらいつプロビジョニングが終わったかわからない．プロビジョニングの終了を告げる通知が欲しい．
少し前からPushoverというiOS/Androidアプリで遊んでいる．シンプルなHTTP POSTを介してアプリに通知が送れる（詳しくは，&amp;ldquo;Pushover使ってみた&amp;rdquo;に書いた）．メールで通知でもよかったんだけど，せっかくなので，Pushoverに通知が送れるVagrantプラグインを作った．
以下のような通知を受け取ることができる．
インストール Vagrantのプラグインとしてインストールする．
$ vagrant plugin install vagrant-pushover  使い方 以下のようにVagrantfileに設定を記述するだけ．
Vagrant.configure(&amp;quot;2&amp;quot;) do |config| config.pushover.set do |p| p.user = &amp;quot;YOUR KEY&amp;quot; p.token = &amp;quot;YOUR APP TOKEN&amp;quot; end end  userはPushoverにサインアップ後にDashboardから，tokenはアプリケーションの登録をすると取得できる．
既存コマンドのフックとして記述してあるので，他に特別なことをする必要はなく，いつも通りにコマンドを実行するだけでよい．通知が行われるのは，プロビジョニングが行われる以下の場合のみ．
 vagrant up vagrant up --provision vagrant reload --provision vagrant provision  ただしvagrant upは，マシンの状態が:runningでない場合，プロビジョニングが一度も行われていない場合に通知が行われる．
他にも，通知のメッセージのタイトルや本文，通知音もVagrantfileの設定から行うことができる．API通りに実装してあるので，詳しくは公式ドキュメントを参照してください．
Vagrantfileを共有したい場合 tokenやuserがベタ書きされているのはよろしくないので，別ファイルとして記述できるようにもしてある．
以下のコマンドで設定ファイルを吐き出す．
$ vagrant pushover-init  設定ファイルは，.vagrant/pushover.rbとして吐き出されるので，中身を編集してtokenとuserを記述する．設定の読み込みを有効にするには，Vagrantfileを以下のように記述するだけ．
Vagrant.configure(&amp;quot;2&amp;quot;) do |config| config.pushover.read_key end  以上．
Vagrantのプラグインを作るのはとても簡単（実際2日もかかってない）．また，プラグインを作ることでVagrantの内部でどのようなことが行われているのか大分理解できる．作成には，&amp;ldquo;実践Vagrant&amp;rdquo;を参考にした．公式ドキュメントも充実している．すべてのVagrantのコマンドはプラグインとして実装されているので，作るときは参考になる．Mitchell Hashimotoさんが自らつくったプラグインvagrant-awsも参考になった．プラグインの作り方は，そのうちまとめる．
Pushoverを使ってるひとにしか使えないかなりニッチなプラグインだけど，プロビジョニング中に美味しい珈琲を淹れたいひとは是非使ってください．バグなどはGithubのissueか@deeeetまでお願いします．
参考</description>
    </item>
    
    <item>
      <title>シンプルにVagrantのprovisioningでchef-soloを使い始める</title>
      <link>http://deeeet.com/writing/2014/02/16/vagrant-chef-minimum/</link>
      <pubDate>Sun, 16 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://deeeet.com/writing/2014/02/16/vagrant-chef-minimum/</guid>
      <description>とにかくシンプルに始めたい．cookbookの作成にはknife-soloを使う．例としてapacheのインストールをして，共有フォルダをホストのブラウザから閲覧できるようにする．
まずレシピの雛形を生成する．
$ knife cookbook create apache -o site-cookbook  次にレシピの編集する．
# recipes/default.rb # Install apache execute &amp;quot;apt-get update&amp;quot; package &amp;quot;apache2&amp;quot; do action :install end # Link to share folder execute &amp;quot;rm -fr /var/www&amp;quot; link &amp;quot;var/www&amp;quot; do to &amp;quot;/vagrant&amp;quot; end  Vagrantfileは以下のようにする．
Vagrant.configure(&amp;quot;2&amp;quot;) do |config| config.vm.box = &amp;quot;precise64&amp;quot; config.vm.box_url = &amp;quot;http://files.vagrantup.com/precise64.box&amp;quot; config.vm.network :forwarded_port, guest: 80, host: 8080 config.vm.provision :chef_solo do |chef| chef.cookbooks_path = &amp;quot;site-cookbooks&amp;quot; chef.run_list = [&amp;quot;apache::default&amp;quot;] end end  </description>
    </item>
    
  </channel>
</rss>