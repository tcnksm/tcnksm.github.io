<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Serf on SOTA</title>
    <link>https://deeeet.com/categories/serf/</link>
    <description>Recent content in Serf on SOTA</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>Copyright (C) 2013-2019 Taichi Nakashima All Right Reserved.</copyright>
    <lastBuildDate>Tue, 01 Apr 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://deeeet.com/categories/serf/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SerfでHAProxyの更新 on Vagrant</title>
      <link>https://deeeet.com/writing/2014/04/01/serf-haproxy/</link>
      <pubDate>Tue, 01 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://deeeet.com/writing/2014/04/01/serf-haproxy/</guid>
      <description>Serfの典型的な使い方として紹介されることの多い，HAProxyの登録/更新をやってみた．これは既に何人かの方が試みているし，SerfのGithubのdemoページでも紹介されている．
 hashicorp/serf/demo/web-load-balancer &amp;ldquo;Serf+HAProxyで作るAutomatic Load Balancer&amp;rdquo; &amp;ldquo;Synapse と Serf でサービスディスカバリ&amp;rdquo;  これらが何をやっているかを簡単に書くと，1つのProxyサーバ（ロードバランサ）と複数のWebサーバという構成において，Webサーバの増減に応じてロードバランサの設定を自動で書き換えるというもの．
これをVagrantで複数サーバを立ち上げて，自分で手を動しつつ触ってみた．
tcnksm/sample-serf-haproxy
Vagrantさえあれば誰でもすぐ試せるようになっている．
Vagrantの準備 以下のようなVagrantfileを準備する．
# Serfのインストール # すべてのホストで実行する $script = &amp;lt;&amp;lt;SCRIPT sudo apt-get install -y unzip cd /tmp/ wget https://dl.bintray.com/mitchellh/serf/0.5.0_linux_amd64.zip -O serf.zip unzip serf.zip chmod +x serf mv serf /usr/bin/serf SCRIPT Vagrant.configure(&amp;quot;2&amp;quot;) do |config| config.vm.box = &amp;quot;precise64&amp;quot; config.vm.box_url = &amp;quot;http://files.vagrantup.com/precise64.box&amp;quot; config.vm.provision :shell, inline: $script # proxyサーバのプロビジョニング # (1) HAProxyのインストール # (2) HAProxyの有効化 # (3) HAProxyの初期設定の書き出し # (4) HAProxyの起動 config.</description>
    </item>
    
    <item>
      <title>Serf 虎の巻</title>
      <link>https://deeeet.com/writing/2014/03/23/serf-basic/</link>
      <pubDate>Sun, 23 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://deeeet.com/writing/2014/03/23/serf-basic/</guid>
      <description>サービスディスカバリーとオーケストレーション用のツールであるSerfについてまとめた．基本的には公式のHPのGetting Startの抄訳．Vagrantで試験環境を立てて実際に触りつつSerfを使い始められるようにした．
目次  Serfとは Gossip protocolとは 試験環境の準備 クラスタの形成 クラスタからの離脱 イベントハンドラ カスタムイベント カスタムクエリ コマンド一覧 参考  Serfとは Serfはサービスディスカバリーやオーケストレーション，障害検出のためのツール．Vagrantの開発者であるMitchell Hashimoto氏により開発が進められている．SerfはImmutable Infrastructureの文脈で登場してきたツールであり，Immutableなシステムアーキテクチャー，デプロイを実現する上で必須のツールである．
Immutable Infrastructureを簡単に説明すると，上書き的にサーバーを更新するのではなく，デプロイの度に１からにサーバ，イメージを構築してしまおうという考え方．現段階では，ChefやPuppet，AnsibleのようなConfiguration toolでソフトウェア，サービスの設定を行いイメージを作成し，テストが完了した段階でロードバランサを切り替えるというワークフローが提唱されている（Blue Green Deployment）．もしくは，Dockerなどのコンテナベースであれば，そのポータビリティにより，ローカルでコンテナをつくって，それをそのままプロダクションデプロイする方法も考えられる．
このとき問題になるのは，ロードバランサへの追加や，Memcacheのクラスタ，MySQLのslave/masterなどの動的に変わるような設定．もちろんChefやPuppetがこれらの設定まで受け持つことは可能であるが，Immutableなデプロイを実現する上では複雑性が増す．
これを解決するのがSerf．ChefやPuppetで不変なサーバ，イメージが完成したあとに，それらのサーバ，イメージ間の紐付けやクラスタリングを行う．
Serfができること Serfは，大きく以下の3つのことを行うことができる．
 クラスタリング: Serfはクラスタを形成し，クラスタへメンバーの参加，離脱といったイベントを検出して，メンバーそれぞれにあらかじめ設定したスクリプトを実行させることができる．例えば，SerfはロードバランサのためのWebサーバのリストをもち，ノードの増減の度にロードバランサにそれを通知することができる． 障害の検出と回復: Serfはクラスタのメンバーが障害で落ちた場合にそれを検出し，残りのメンバーにそれを通知することができる．また，障害によりダウンしたメンバーを再びクラスタに参加させるように働く． イベントの伝搬: Serfはメンバーの参加，離脱といったイベント以外にオリジナルのカスタムイベントをメンバーに伝搬させることができる．これらは，デプロイやConfigurationのトリガーなどに使うことができる．  Serfの利用例 具体的なSerfの利用例には以下のようなものがある．
 Webサーバのロードバランサへの登録，解除 RedisやMemcachedのクラスタリング DNSの更新 デプロイのトリガー（カスタムイベント） シンプルなサービス監視（カスタムクエリ）  詳細は，公式のUse Casesを参照．
目次へ
Gossip Protocolとは Serfはクラスタのメンバーへのイベントの伝搬にGossip Protocolを用いている．Gossip Protocolは&amp;ldquo;SWIM: Scalable Weakly-consistent Infection-style Process Group Membership Protocol&amp;rdquo;を基にしており，SWIMのイベントの伝搬速度とカバレッジに改良を加えている．
SWIM Protocolの概要 Serfは新しいクラスタの形成，既存のクラスタへ参入，のどちらかで起動する．新しいクラスタが形成されると，そこには新しいノードが参入してくることが期待される．既存のクラスタに参入するには，既存クラスタのメンバーのIPアドレスが必要になる．新しいメンバーはTCPで既存クラスタのメンバーと状態が同期され，Gossiping（噂，情報のやりとり）が始まる．
GossipingはUDPで通信される．これにより，ネットワークの容量はノードの数に比例して一定になる．Gossipingよりも頻度は低いが，定期的にTCPによるランダムなノード間で完全な状態同期が行われる．
障害検出は，定期的にランダムなノードをチェックすることにより行われる．もし一定期間あるノードから反応がない場合は，直接そのノードに対してチェックが行われる．ネットワーク上問題でノードからの反応が得られていない可能性を考慮して，この直接のチェックは複数のノードから行われる．ランダムなチェックおよび，直接のチェックでも反応がない場合，そのノードは，_suspicious_と認定される．_suspicious_であってもそのノードはクラスタの一員として扱われる．それでも反応が慣れれば，そのノードは落ちたと認定され，それは他のノードにGossipされる．
GossipのSWIMからの改良点 Gossip ProtocolのSWIMからの変更点は大きく以下の3点</description>
    </item>
    
  </channel>
</rss>