<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker Packer on SOTA</title>
    <link>https://deeeet.com/categories/docker-packer/</link>
    <description>Recent content in Docker Packer on SOTA</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>Copyright (C) 2013-2019 Taichi Nakashima All Right Reserved.</copyright>
    <lastBuildDate>Mon, 03 Mar 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://deeeet.com/categories/docker-packer/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DockerイメージのビルドにPackerを使うべき理由</title>
      <link>https://deeeet.com/writing/2014/03/03/why-building-docker-by-packer/</link>
      <pubDate>Mon, 03 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://deeeet.com/writing/2014/03/03/why-building-docker-by-packer/</guid>
      <description>&amp;ldquo;Ask HN: Do you bake AMIs for AWS deployments?&amp;rdquo;での，Mitchell Hashimoto氏のコメントより．簡単に抄訳．
 ソフトウェアのインストールや設定の知識は，依然としてShellscriptやChef，Puppetに残っている．Packerを使えば，Dockerのコンテナの作成に現時点で存在している経験やCIプロセスなどを利用できる． 共通のフォーマットの設定．Dockerfileの記述は特有である．それは良いが，現状様々なイメージ(AMIやDockerのコンテナ，Virtualboxなど)が存在する．Dockerが全てではないとき，イメージをビルドするために様々なツールをメンテするのは負担になる．Packerを使えば，一つの方法で，さまざまなプラットフォームに対応できる．たとえ企業がDockerのみに移行しても． 移植性．Packerは低リスクでDockerのコンテナに対応できる．DockerfileはDockerのためのものである．例えばDockerが気に入らない場合や，Dockerがある状況に対して適切ではない場合に，Dockerfileは別のフォーマットに移し替えられなければならない． 拡張性．Packerは簡単にプラグインを作ることができる．Dockerは特別なコマンドの追加をサボートしていないが，Packerなら可能（それが必要かは別にして）． プロセスがシンプル．Packerのイメージのビルドプロセスは，1..Nと順に進むだけで，余計なプロセスはない．DockerのコンテナやAminatorのAMIのビルドは異なるプロセスをもつ．新しいプロセスは，CIの特別な処理や，新人への教育，新たなメンテナンスを生む．  最後にPackerの今後についても言及している．現時点では，Packerには，Dockerのようにステップごとにスナップショットをとる機能はない．そのためbuildし直すと処理ははじめからになる．しかし，現時点でそのスナップショットの機能に取り組んでおり，将来サポートされる予定らしい．これができれば，docker buildのようにpacker buildの場合も，必要なステップから処理が再開されるようになる．クールだ．
Packerを使ったdockerイメージのビルドは，&amp;ldquo;Packerを使ってChef/Puppet/AnsibleでDockerのイメージをつくる&amp;rdquo;に書いた．とても簡単．</description>
    </item>
    
    <item>
      <title>Packerを使ってChef/Puppet/AnsibleでDockerのイメージをつくる</title>
      <link>https://deeeet.com/writing/2014/03/02/build-docker-image-by-packer/</link>
      <pubDate>Sun, 02 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://deeeet.com/writing/2014/03/02/build-docker-image-by-packer/</guid>
      <description>Packerは，Vagrantの作者であるMitchell Hashimoto氏によって開発が進められているVirtualBoxやVMWare，Amazon EC2などの仮想マシンのテンプレートの作成を行うツール．VagrantのVirtualBox用のBoxを作るveeweeに置き換わるツールとして知られている．最近のアップデートでDockerのイメージのビルドをサポートした．
TL;DR Packerを使えばDockerのイメージをDockerfileを使わずビルドすることができる
つまり，Dockerfileの特有な記述を使わず，今まで慣れ親しんできたChefやPuppet，Ansibleのようなプロビジョニングツールを使ってDockerのイメージをビルドできる．
参考
 DockerイメージのビルドにPackerを使うべき理由  サンプル tcnksm/packer-docker
サンプルコードは全て上のレポジトリにある．ChefとPuppetとAnsibleで最小限で単純なサンプルを試した．
準備（Vagrantfile） 実行はすべてVagrantのVM上で行う．Vagrantの1.4以上がインストールされていれば，以下のVagrantfileを使えばすぐに試せる．
Vagrant.configure(&amp;quot;2&amp;quot;) do |config| config.vm.box = &amp;quot;precise64&amp;quot; config.vm.box_url = &amp;quot;http://files.vagrantup.com/precise64.box&amp;quot; # config.vm.provision :docker do |d| d.pull_images &amp;quot;ubuntu&amp;quot; end config.vm.provision :shell, :inline =&amp;gt; &amp;lt;&amp;lt;-PREPARE apt-get -y update apt-get install -y wget unzip curl mkdir /home/vagrant/packer cd /home/vagrant/packer wget https://dl.bintray.com/mitchellh/packer/0.5.2_linux_amd64.zip unzip 0.5.2_linux_amd64.zip echo &amp;quot;export PATH=$PATH:/home/vagrant/packer&amp;quot; &amp;gt; /home/vagrant/.bashrc PREPARE end  DockerとPackerの最新版のインストールしているだけ（注: PackerはOSX上でも動くが，OSXのDocker Clientのバグのためにうまく連携できなったので，PackerもVagrant上で実行している）．
準備（Chef） ここでは例として，apacheのインストールを行うクックブックとレシピを準備する．
$ knife cookbook create apache -o site-cookbooks  # site-cookbooks/apache/recipes/default.</description>
    </item>
    
  </channel>
</rss>